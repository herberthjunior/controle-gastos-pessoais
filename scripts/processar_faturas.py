#!/usr/bin/env python3
"""
Script Principal - Sistema de Controle de Gastos Pessoais
Orquestra a extra√ß√£o, tratamento e classifica√ß√£o autom√°tica de dados das faturas CSV.
"""

import os
import sys
from datetime import datetime
from extrator_csv import ExtratorCSV
from tratamento_dados import TratamentoDados
from classificador_llm import ClassificadorLLM

def main():
    """
    Fun√ß√£o principal que executa todo o processo de ETL + Classifica√ß√£o.
    """
    print("=" * 60)
    print("SISTEMA DE CONTROLE DE GASTOS PESSOAIS")
    print("Processamento Completo de Faturas - Vers√£o 2.0")
    print("=" * 60)
    print(f"Iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print()
    
    try:
        # Etapa 1: Extra√ß√£o de dados dos CSVs
        print("üìÅ ETAPA 1: Extra√ß√£o de dados dos arquivos CSV")
        print("-" * 50)
        
        extrator = ExtratorCSV()
        dados_extraidos = extrator.processar_todos_arquivos()
        
        if not dados_extraidos:
            print("‚ùå Nenhum arquivo CSV encontrado para processar.")
            print("   Verifique se existem arquivos na pasta 'faturas/'")
            return False
        
        print(f"‚úÖ {len(dados_extraidos)} transa√ß√µes extra√≠das com sucesso")
        print()
        
        # Etapa 2: Tratamento e integra√ß√£o dos dados
        print("üîÑ ETAPA 2: Tratamento e integra√ß√£o dos dados")
        print("-" * 50)
        
        tratamento = TratamentoDados()
        stats = tratamento.integrar_novos_dados(dados_extraidos)
        
        print()
        
        # Etapa 3: Classifica√ß√£o autom√°tica com LLM
        print("ü§ñ ETAPA 3: Classifica√ß√£o autom√°tica com LLM")
        print("-" * 50)
        
        classificador = ClassificadorLLM()
        
        # Verificar se h√° registros para classificar
        classificador.carregar_dados()
        registros_sem_categoria = classificador.identificar_registros_sem_categoria()
        
        if len(registros_sem_categoria) > 0:
            print(f"Encontrados {len(registros_sem_categoria)} registros para classificar...")
            sucesso_classificacao = classificador.executar_classificacao_completa()
            
            if not sucesso_classificacao:
                print("‚ö†Ô∏è  Falha na classifica√ß√£o, mas dados foram processados")
        else:
            print("‚úÖ Todos os registros j√° est√£o classificados!")
        
        print()
        
        # Etapa 4: Relat√≥rio final
        print("üìä ETAPA 4: Relat√≥rio final de processamento")
        print("-" * 50)
        
        print(f"Total processado: {stats['total_processados']} transa√ß√µes")
        print(f"Novos registros: {stats['novos_inseridos']}")
        print(f"Duplicatas ignoradas: {stats['duplicatas_ignoradas']}")
        print(f"Total no banco: {stats['total_final']} registros")
        
        # Estat√≠sticas detalhadas do banco final
        stats_bd = tratamento.obter_estatisticas()
        
        print(f"\nüí∞ Valor total: R$ {stats_bd['valor_total']:.2f}")
        print(f"üè¶ Bancos: {', '.join(stats_bd['bancos'].keys())}")
        print(f"üìÖ Per√≠odos: {', '.join(stats_bd['periodos'])}")
        print(f"üè∑Ô∏è  Registros sem categoria: {stats_bd['registros_sem_categoria']}")
        
        # Se todos est√£o classificados, mostrar distribui√ß√£o
        if stats_bd['registros_sem_categoria'] == 0:
            print("\nüéØ Distribui√ß√£o por categoria:")
            # Recarregar dados para pegar as classifica√ß√µes
            classificador.carregar_dados()
            if classificador.df_dados is not None:
                categorias = classificador.df_dados['Categoria'].value_counts()
                for cat, count in categorias.head(5).items():
                    valor_cat = classificador.df_dados[classificador.df_dados['Categoria'] == cat]['Valor'].sum()
                    print(f"   {cat}: {count} registros (R$ {valor_cat:.2f})")
        
        print()
        print("=" * 60)
        print("‚úÖ PROCESSAMENTO COMPLETO CONCLU√çDO COM SUCESSO!")
        print("üöÄ PR√ìXIMO PASSO: Dashboard interativo")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO DURANTE O PROCESSAMENTO: {e}")
        print("=" * 60)
        return False

if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)
